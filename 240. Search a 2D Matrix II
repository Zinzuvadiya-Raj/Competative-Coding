class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        boolean flag = true;
        int n = matrix.length;
        if (matrix.length > matrix[0].length) {
            flag = false; // use column to iterate
            n = matrix[0].length;
        }
        for (int i = 0; i < n; i++) {
            if (flag) {
                if (binSearchRow(i,matrix,target)) 
                {
                    return true;
                }
            } else {
                if(binSeachColumn(i,matrix,target))
                {
                    return true;
                }
            }
        }
        return false;
        
    }
    static boolean binSeachColumn(int col, int matrix[][], int target) {
        int i = 0, j = matrix.length - 1;
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (matrix[mid][col] == target)
                return true;
            else if (matrix[mid][col] > target)
                j = mid - 1;
            else
                i = mid + 1;
        }

        return false;
    }
    static boolean binSearchRow(int row, int matrix[][], int target) {
        int i = 0, j = matrix[0].length - 1;
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (matrix[row][mid] == target)
                return true;
            else if (matrix[row][mid] > target)
                j = mid - 1;
            else
                i = mid + 1;
        }

        return false;
    }
    
}
